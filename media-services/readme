## Instructions for Setting Up Drives and Mounting in Debian

### Checking UUID of Drive

1. Open a terminal.
2. Run the following command to list all drives and their UUIDs:
   ```sh
   sudo blkid
   ```
3. Note the UUID of the drive you want to mount.

### Mounting Drive in `fstab`

1. Open the `fstab` file in a text editor:
   ```sh
   sudo nano /etc/fstab
   ```
2. Add the following line to the file, replacing `<UUID>` with the UUID of your drive and `<mount_point>` with the desired mount point:
   ```plaintext
   UUID=<UUID>  <mount_point>  ext4  defaults  0  2
   ```
3. Save and close the file.
4. Create the mount point directory if it doesn't exist:
   ```sh
   sudo mkdir -p <mount_point>
   ```
5. Mount all filesystems:
   ```sh
   sudo mount -a
   ```

### Downloading Required Software

Before deploying the Docker stack, ensure you have the following software installed:

1. **Docker**: Follow the instructions on the [Docker website](https://docs.docker.com/get-docker/) to install Docker on your system.
2. **Docker Compose**: Follow the instructions on the [Docker Compose website](https://docs.docker.com/compose/install/) to install Docker Compose.

Verify the installations by running:
```sh
docker --version
docker-compose --version
```

### Create Necessary Directories on the Host Machine

```sh
mkdir -p /home/miles/docker/jackett/config /home/miles/docker/jackett/downloads /home/miles/docker/sonarr/config /home/miles/docker/sonarr/downloads /home/miles/docker/sonarr/media /home/miles/docker/radarr/config /home/miles/docker/radarr/downloads /home/miles/docker/radarr/media /home/miles/docker/overseerr/config /home/miles/docker/vpn/.envvpn /home/miles/docker/qbittorrent/config /home/miles/docker/qbittorrent/downloads /home/miles/docker/qbittorrent/incomplete /home/miles/docker/plex/data /home/miles/docker/plex/config
```

### Deploying the Docker Stack

Once the software is installed, you can deploy the Docker stack using:
```sh
docker-compose up -d
```

### Service Documentation

#### Jackett

Jackett is a tool that automates the process of searching for torrents. It provides a unified API for various torrent sites.

- **Web UI**: Accessible at port `9117`.
- **Configuration**: Stored in `jackett_config` volume.
- **Downloads**: Stored in `jackett_downloads` volume.
- **Command**:
  ```sh
  docker run -d --name=jackett -e PUID=1000 -e PGID=1000 -e TZ=America/Los_Angeles -p 9117:9117 -v /path/to/config:/config -v /path/to/downloads:/downloads --restart unless-stopped linuxserver/jackett
  ```

#### Sonarr

Sonarr is a PVR for Usenet and BitTorrent users. It can monitor multiple RSS feeds for new episodes of your favorite shows and will grab, sort, and rename them.

- **Web UI**: Accessible at port `8989`.
- **Configuration**: Stored in `sonarr_config` volume.
- **TV Shows**: Stored in `/mnt/seagate/Shows`.
- **Downloads**: Stored in `/mnt/seagate/Completed Torrents`.
- **Command**:
  ```sh
  docker run -d --name=sonarr -e PUID=1000 -e PGID=1000 -e TZ=America/Los_Angeles -p 8989:8989 -v /path/to/config:/config -v /path/to/tvshows:/tvshows -v /path/to/downloads:/downloads --restart unless-stopped linuxserver/sonarr
  ```

#### Radarr

Radarr is a movie collection manager for Usenet and BitTorrent users. It can monitor multiple RSS feeds for new movies and will grab, sort, and rename them.

- **Web UI**: Accessible at port `7878`.
- **Configuration**: Stored in `radarr_config` volume.
- **Movies**: Stored in `/mnt/seagate/Movies`.
- **Downloads**: Stored in `/mnt/seagate/Completed Torrents`.
- **Command**:
  ```sh
  docker run -d --name=radarr -e PUID=1000 -e PGID=1000 -e TZ=America/Los_Angeles -p 7878:7878 -v /path/to/config:/config -v /path/to/movies:/movies -v /path/to/downloads:/downloads --restart unless-stopped linuxserver/radarr
  ```

#### Overseerr

Overseerr is a request management and media discovery tool. It integrates with Sonarr and Radarr to manage requests for new content.

- **Web UI**: Accessible at port `5055`.
- **Configuration**: Stored in `../.cnf`.
- **Command**:
  ```sh
  docker run -d --name=overseerr -e PUID=1000 -e PGID=1000 -e TZ=America/Los_Angeles -p 5055:5055 -v /path/to/config:/config --restart unless-stopped sctx/overseerr
  ```

#### WordPress

WordPress is a free and open-source content management system.

- **Data**: Stored in `./wordpress`.
- **Command**:
  ```sh
  docker run -d --name=wordpress -e WORDPRESS_DB_HOST=db:3306 -e WORDPRESS_DB_USER=exampleuser -e WORDPRESS_DB_PASSWORD=examplepass -e WORDPRESS_DB_NAME=exampledb -p 8080:80 -v /path/to/wordpress:/var/www/html --restart unless-stopped wordpress
  ```

#### Cloudflared Tunnel

Cloudflared Tunnel is used to securely connect to Cloudflare's network.

- **Command**: `tunnel run --token "$CLOUDFLARE_TUNNEL_TOKEN"`.
- **Environment Variables**: Stored in `.envtunnel`.
- **Command**:
  ```sh
  docker run -d --name=cloudflared --env-file /path/to/.envtunnel cloudflare/cloudflared:latest tunnel run --token "$CLOUDFLARE_TUNNEL_TOKEN"
  ```

#### VPN

VPN service using NordVPN.

- **Ports**: `6881` for BitTorrent, `8080` for Web UI.
- **Environment Variables**: Stored in `.envvpn`.
- **Command**:
  ```sh
  docker run -d --name=nordvpn --cap-add=NET_ADMIN -p 6881:6881 -p 8080:8080 --env-file /path/to/.envvpn --restart unless-stopped bubuntux/nordvpn
  ```

#### qBittorrent

qBittorrent is a free and open-source BitTorrent client.

- **Web UI**: Accessible at port `8080`.
- **Configuration**: Stored in `qbittorrent_config` volume.
- **Downloads**: Stored in `/mnt/seagate/Completed Torrents`.
- **Incomplete Downloads**: Stored in `/mnt/seagate/Unfinished Torrents`.
- **Command**:
  ```sh
  docker run -d --name=qbittorrent -e PUID=1000 -e PGID=1000 -e TZ=America/Los_Angeles -p 8080:8080 -v /path/to/config:/config -v /path/to/downloads:/downloads -v /path/to/incomplete:/incomplete --restart unless-stopped linuxserver/qbittorrent
  ```

#### Plex

Plex is a media server that organizes video, music, and photos.

- **Ports**: `32400` for Plex, other ports are commented out.
- **Configuration**: Stored in `../Test`.
- **Media Files**: Stored in `../Test`.
- **Command**:
  ```sh
  docker run -d --name=plex -e PUID=1000 -e PGID=1000 -e TZ=America/Los_Angeles -p 32400:32400 -v /path/to/config:/config -v /path/to/media:/media --restart unless-stopped linuxserver/plex
  ```
